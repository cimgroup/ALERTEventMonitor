/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package alerteventmonitor;

import ActiveMQ.SimpleTopicSubscriber;
import java.awt.Color;
import java.io.*;
import java.security.Timestamp;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.*;
import org.xml.sax.SAXException;

/**
 *
 * @author Sasa.Stojanovic
 */
public class EventMonitor extends javax.swing.JFrame {

    public static CustomTreeNode oSelectedNode = null;
    
    /**
     * Creates new form EventMonitor
     */
    public EventMonitor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        trEvents = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtEventName = new javax.swing.JTextField();
        btnNodeName = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnChild = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEvents = new javax.swing.JTable();
        btnMonitorStart = new javax.swing.JButton();
        btnClearEvents = new javax.swing.JButton();
        btnSaveEvents = new javax.swing.JButton();
        btnLoadEvents = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtActiveMQ = new javax.swing.JTextField();
        btnChange = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ALERT Event Monitor");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1136, 631));
        setMinimumSize(new java.awt.Dimension(670, 305));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Events to monitor"));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("< New event >");
        trEvents.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        trEvents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                trEventsMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(trEvents);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Event editor"));

        jLabel2.setText("Event name:");

        txtEventName.setText("< Select event from list >");
        txtEventName.setEnabled(false);
        txtEventName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtEventNameMouseReleased(evt);
            }
        });

        btnNodeName.setText("Change");
        btnNodeName.setEnabled(false);
        btnNodeName.setPreferredSize(new java.awt.Dimension(69, 22));
        btnNodeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNodeNameActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete event");
        btnDelete.setEnabled(false);
        btnDelete.setPreferredSize(new java.awt.Dimension(69, 22));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnChild.setText("New child event");
        btnChild.setEnabled(false);
        btnChild.setPreferredSize(new java.awt.Dimension(69, 22));
        btnChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChildActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEventName, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNodeName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnChild, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnNodeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnChild, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtEventName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel2))
        );

        tblEvents.setAutoCreateRowSorter(true);
        tblEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Event ID", "Event name", "Parent (ms)", "Root (ms)", "Timestamp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblEvents.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(tblEvents);

        btnMonitorStart.setText("Start monitoring");
        btnMonitorStart.setPreferredSize(new java.awt.Dimension(69, 22));
        btnMonitorStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMonitorStartActionPerformed(evt);
            }
        });

        btnClearEvents.setText("Clear events");
        btnClearEvents.setPreferredSize(new java.awt.Dimension(69, 22));
        btnClearEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearEventsActionPerformed(evt);
            }
        });

        btnSaveEvents.setText("Save events");
        btnSaveEvents.setPreferredSize(new java.awt.Dimension(69, 22));
        btnSaveEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveEventsActionPerformed(evt);
            }
        });

        btnLoadEvents.setText("Load events");
        btnLoadEvents.setPreferredSize(new java.awt.Dimension(69, 22));
        btnLoadEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadEventsActionPerformed(evt);
            }
        });

        btnExport.setText("Export log");
        btnExport.setPreferredSize(new java.awt.Dimension(69, 22));
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnClearEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnMonitorStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnMonitorStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClearEvents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSaveEvents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLoadEvents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("ALERT EVENT MONITOR");

        jLabel6.setText("ActiveMQ address:");

        txtActiveMQ.setPreferredSize(new java.awt.Dimension(65, 22));

        btnChange.setText("Change");
        btnChange.setPreferredSize(new java.awt.Dimension(69, 22));
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 534, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtActiveMQ, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChange, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtActiveMQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(btnChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(8, 8, 8)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        if (btnChange.getText() == "Change")
        {
            btnChange.setText("Save");
            txtActiveMQ.setEnabled(true);
        }
        else
        {
            btnChange.setText("Change");
            txtActiveMQ.setEnabled(false);
            Constants.sActiveMQAddress = txtActiveMQ.getText();
            if (TestActiveMQ(Constants.sActiveMQAddress))
                txtActiveMQ.setDisabledTextColor(Color.gray);
            else
                txtActiveMQ.setDisabledTextColor(Color.red);
        }
    }//GEN-LAST:event_btnChangeActionPerformed

    private void btnNodeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNodeNameActionPerformed
        // TODO add your handling code here:
        SaveEvent();
    }//GEN-LAST:event_btnNodeNameActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        DeleteEvent();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnChildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChildActionPerformed
        // TODO add your handling code here:
        CreateNewChild();
    }//GEN-LAST:event_btnChildActionPerformed

    private void trEventsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trEventsMouseReleased
        // TODO add your handling code here:
        TreePath tpPath = trEvents.getPathForLocation(evt.getX(), evt.getY());
        if (tpPath != null && btnMonitorStart.getText().equals("Start monitoring"))
        {
            DefaultMutableTreeNode tnSelected = (DefaultMutableTreeNode)trEvents.getLastSelectedPathComponent();
            int iHashCode = tnSelected.hashCode();
            oSelectedNode = Global.GetNodeForHashCode(iHashCode);
            if (oSelectedNode != null)
            {
                txtEventName.setText(oSelectedNode.sEventName);
                txtEventName.setEnabled(false);
                btnNodeName.setEnabled(true);
                btnNodeName.setText("Change");
                btnDelete.setEnabled(true);
                btnChild.setEnabled(true);
            }
            else
            {
                txtEventName.setText(tnSelected.toString());
                txtEventName.setEnabled(true);
                btnNodeName.setEnabled(true);
                btnNodeName.setText("Save");
                btnDelete.setEnabled(true);
                btnChild.setEnabled(false);
                
                oSelectedNode = new CustomTreeNode();
                oSelectedNode.iHashCode = iHashCode;
                oSelectedNode.tnNode = tnSelected;
                if (tnSelected.getParent() != null)
                    oSelectedNode.iParentHashCode = tnSelected.getParent().hashCode();
            }
        }
        else
        {
            ClearFields();
        }
    }//GEN-LAST:event_trEventsMouseReleased

    private void txtEventNameMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtEventNameMouseReleased
        // TODO add your handling code here:
        if (txtEventName.getText().equals("< New event >") && txtEventName.isEnabled())
        {
            txtEventName.setText("");
        }
    }//GEN-LAST:event_txtEventNameMouseReleased

    private void btnMonitorStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMonitorStartActionPerformed
        // TODO add your handling code here:
        if (btnMonitorStart.getText().equals("Start monitoring"))
            MonitorStart();
        else
            MonitorStop();
    }//GEN-LAST:event_btnMonitorStartActionPerformed

    private void btnClearEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearEventsActionPerformed
        // TODO add your handling code here:
        ClearEventList();
    }//GEN-LAST:event_btnClearEventsActionPerformed

    private void btnSaveEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveEventsActionPerformed
        // TODO add your handling code here:
        SaveEventList();
    }//GEN-LAST:event_btnSaveEventsActionPerformed

    private void btnLoadEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadEventsActionPerformed
        // TODO add your handling code here:
        LoadEventList();
    }//GEN-LAST:event_btnLoadEventsActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        try {
            // TODO add your handling code here:
            ExportLog();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(EventMonitor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EventMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EventMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EventMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EventMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                
            }
        });
    }
    
    public void SetControls()
    {
        //Constants.sEventTypes.add(Constants.c_ET_ALERT_KESI_IssueNew);

        txtActiveMQ.setText(Constants.sActiveMQAddress);
        txtActiveMQ.setEnabled(false);
        
        CustomTreeCellRenderer renderer = new CustomTreeCellRenderer();
        trEvents.setCellRenderer(renderer);
        btnMonitorStart.setForeground(Color.decode("#005500"));
        
        tblEvents.getColumnModel().getColumn(0).setPreferredWidth(40);
        tblEvents.getColumnModel().getColumn(1).setPreferredWidth(110);
        tblEvents.getColumnModel().getColumn(2).setPreferredWidth(280);
        tblEvents.getColumnModel().getColumn(3).setPreferredWidth(80);
        tblEvents.getColumnModel().getColumn(4).setPreferredWidth(80);
        tblEvents.getColumnModel().getColumn(5).setPreferredWidth(170);
    }
    
    public void SaveEvent()
    {
        if (btnNodeName.getText().equals("Save"))
        {
            if (oSelectedNode.sEventName != null)
            {
                //already saved event
                oSelectedNode.sEventName = txtEventName.getText();
                oSelectedNode.tnNode.setUserObject(txtEventName.getText());
            }
            else
            {
                oSelectedNode.sEventName = txtEventName.getText();
                Global.oTreeNodes.add(oSelectedNode);
                oSelectedNode.tnNode.setUserObject(txtEventName.getText());
            }
            
            txtEventName.setEnabled(false);
            btnNodeName.setText("Change");
            btnChild.setEnabled(true);
            
            trEvents.updateUI();
        }
        else
        {
            txtEventName.setEnabled(true);
            btnNodeName.setEnabled(true);
            btnNodeName.setText("Save");
            btnDelete.setEnabled(true);
            btnChild.setEnabled(true);
        }
    }
    
    public void DeleteEvent()
    {
        if (oSelectedNode.tnNode.getChildCount() == 0)
        {
            if (oSelectedNode.tnNode.isRoot())
                oSelectedNode.tnNode.setUserObject("< New event >");
            oSelectedNode.tnNode.removeFromParent();
            Global.oTreeNodes.remove(oSelectedNode);
            trEvents.updateUI();
            ClearFields();
        }
    }
    
    public void ClearFields()
    {
        oSelectedNode = null;
        txtEventName.setText("< Select event from list >");
        trEvents.setSelectionPath(null);
        txtEventName.setEnabled(false);
        btnNodeName.setEnabled(false);
        btnNodeName.setText("Change");
        btnDelete.setEnabled(false);
        btnChild.setEnabled(false);
    }
    
    public void CreateNewChild()
    {
        DefaultMutableTreeNode oNewChild = new DefaultMutableTreeNode("< New event >");
        oSelectedNode.tnNode.add(oNewChild);
        
        TreePath tpPath = new TreePath( oSelectedNode.tnNode.getPath());
        trEvents.expandPath(tpPath);
        
        trEvents.updateUI();
    }
    
    
    public String InsertTagAfterTag(String sFile, String sNewTag, String sNewTagValue, String sAfterTag)
    {
        try 
        {
            String sNewTagFull = "<" + sNewTag + ">" + sNewTagValue + "</" + sNewTag + ">";
            sAfterTag = "<" + sAfterTag + ">";
            sFile = sFile.substring(0, sFile.indexOf(sAfterTag) + sAfterTag.length()) + sNewTagFull + sFile.substring(sFile.indexOf(sAfterTag) + sAfterTag.length() + 1);  
        }
        catch (Exception ex) {}
        return sFile;
    }
    
    public void MonitorStart()
    {
        try
        {
            ClearFields();
            btnChange.setEnabled(false);
            btnClearEvents.setEnabled(false);
            btnSaveEvents.setEnabled(false);
            btnLoadEvents.setEnabled(false);
            btnMonitorStart.setText("Stop monitoring");
            btnMonitorStart.setForeground(Color.red);
            
            //clear all topics for subscription
            Constants.sTopics.clear();
            
            //clear all rows from event table
            DefaultTableModel tmModel = ((DefaultTableModel)tblEvents.getModel());
            for (int i = tmModel.getRowCount() - 1; i >= 0; i--) {
                tmModel.removeRow(i);
            }
            
            //add subscription topics
            for (int i = 0; i < Global.oTreeNodes.size(); i++)
            {
                Global.oTreeNodes.get(i).bReceived = false;
                Global.oTreeNodes.get(i).sTimeStamps.clear();
                Global.oTreeNodes.get(i).tnNode.setUserObject(Global.oTreeNodes.get(i).sEventName);     
                Constants.sTopics.add(Global.oTreeNodes.get(i).sEventName);
            }
            
            //reset event number
            Global.iEventNumber = 0;

            //creating new thread for listener
            Runnable rListener = new Runnable() {
                @Override
                public void run() {
                    Constants.bMonitorStop = false;
                    SimpleTopicSubscriber.StartListening();
                }
            };
            Thread thrListener = new Thread(rListener);
            thrListener.start();

            trEvents.updateUI();
        }
        catch (Exception ex)
        {
            
        }
    }
    
    public void MonitorStop()
    {
        btnMonitorStart.setText("Start monitoring");
        btnMonitorStart.setForeground(Color.decode("#005500"));
        btnChange.setEnabled(true);
        btnClearEvents.setEnabled(true);
        btnSaveEvents.setEnabled(true);
        btnLoadEvents.setEnabled(true);
        
        Constants.bMonitorStop = true;
        
        for (int i = 0; i < Global.oTreeNodes.size(); i++)
        {
            Global.oTreeNodes.get(i).bReceived = null;
        }
        
        trEvents.updateUI();
    }
    
    public boolean TestActiveMQ(String sActiveMQAddress)
    {
        boolean bValidActiveMQAddress = true;
        
        Context jndiContext = null;
        TopicConnectionFactory topicConnectionFactory = null;
        TopicConnection topicConnection = null;
        TopicSession topicSession = null;
        Topic topic = null;
        TopicPublisher topicPublisher = null;
        TextMessage message = null;

        try {
            Properties env = new Properties( );
            env.setProperty(Context.INITIAL_CONTEXT_FACTORY,"org.apache.activemq.jndi.ActiveMQInitialContextFactory");
            env.setProperty(Context.PROVIDER_URL, Constants.sActiveMQAddress);
            env.setProperty("topic." + Constants.c_ET_ALERT_KESI_IssueNew, Constants.c_ET_ALERT_KESI_IssueNew);
            jndiContext = new InitialContext(env);
        }
        catch (NamingException e){
            System.out.println("Could not create JNDI API " + "context: " + e.toString());
            e.printStackTrace();
        }

        try {
            topicConnectionFactory = (TopicConnectionFactory) jndiContext.lookup("TopicConnectionFactory");
            topic = (Topic) jndiContext.lookup(Constants.c_ET_ALERT_KESI_IssueNew);
        }
        catch (NamingException e) {
            System.out.println("JNDI API lookup failed: " +  e.toString());
            e.printStackTrace();
        }

        try
        {
            topicConnection = topicConnectionFactory.createTopicConnection();
            topicSession = topicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
            topicPublisher = topicSession.createPublisher(topic);
            message = topicSession.createTextMessage();
        } 
        catch (JMSException e)
        {
            System.out.println("Exception occurred: " + e.toString());
            bValidActiveMQAddress = false;
        } 
        finally 
        {
            if (topicConnection != null)
            {
                try
                {
                    topicConnection.close();
                }
                catch (JMSException e){}
            }
            return bValidActiveMQAddress;
        }
    }
    
    public void RefreshTree()
    {
        try
        {
            trEvents.updateUI();
        }
        catch (Exception ex)
        {
            System.out.println("Exception: " + ex.toString());
        }
    }
    
    public void AddEventToTable(int iEventNumber, String sEventID, String sEventName, Long lParentTime, Long lRootTime, String sCurrentTime)
    {
        ((DefaultTableModel)tblEvents.getModel()).addRow(new Object[]{iEventNumber, sEventID, sEventName, lParentTime, lRootTime, sCurrentTime});
    }
    
    public void ClearEventList()
    {
        DefaultMutableTreeNode tnRoot = null;
        for (int i = 0; i < Global.oTreeNodes.size(); i++)
        {
            if (Global.oTreeNodes.get(i).tnNode.isRoot())
            {
                Global.oTreeNodes.get(i).tnNode.setUserObject("< New event >");
                tnRoot = Global.oTreeNodes.get(i).tnNode;
            }
            Global.oTreeNodes.get(i).tnNode.removeFromParent();
        }
        
        if (tnRoot != null && tnRoot.getChildCount() >= 0) { 
        for (Enumeration e=tnRoot.children(); e.hasMoreElements(); ) { 
                DefaultMutableTreeNode tnChildren = (DefaultMutableTreeNode)e.nextElement(); 
                tnChildren.removeFromParent();
            }
        }

        Global.oTreeNodes.clear();
        trEvents.updateUI();
        ClearFields();
    }
    
    public void SaveEventList()
    {
        try
        {
            if (Global.oTreeNodes.size() > 0)
            {
                JFileChooser fcSave = new JFileChooser(OSValidator.GetAppPath() + "/SavedEventsStructure");
                fcSave.setFileFilter(new xmlFileFilter());
                int drResult = fcSave.showSaveDialog(jPanel1);
                if (drResult == JFileChooser.APPROVE_OPTION)
                {
                    File fSelected = fcSave.getSelectedFile();
                    String sFilePath = fSelected.getPath();
                    if (!sFilePath.endsWith(".xml") && !sFilePath.endsWith(".XML"))
                    {
                        sFilePath += ".xml";
                    }

                    DocumentBuilderFactory dbfFactory = DocumentBuilderFactory.newInstance();
                    dbfFactory.setNamespaceAware(true);
                    DocumentBuilder dbBuilder = dbfFactory.newDocumentBuilder();
                    Document dDoc = dbBuilder.newDocument();
                    dDoc.setXmlVersion("1.0");
                    CreateStructureForEvent(Global.oTreeNodes.get(0).tnNode, null, dDoc);

                    TransformerFactory tFactory = TransformerFactory.newInstance();
                    tFactory.setAttribute("indent-number", 2);
                    Transformer tTransformer = tFactory.newTransformer();
                    tTransformer.setOutputProperty(OutputKeys.METHOD, "xml");           
                    tTransformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
                    tTransformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
                    tTransformer.setOutputProperty(OutputKeys.INDENT, "yes");
                    tTransformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

                    //Write the document to a file
                    Source srcDocument = new DOMSource(dDoc);
                    Result rsLocation = new StreamResult(new File(sFilePath));
                    tTransformer.transform(srcDocument, rsLocation);
                }
            }
            else
            {
                JOptionPane opNoEvents = new JOptionPane("Event tree is empty. No events to save.", JOptionPane.WARNING_MESSAGE, JOptionPane.CLOSED_OPTION);
                JDialog dialog = opNoEvents.createDialog("Warning!");
                dialog.show();
            }
        }
        catch (Exception ex)
        {
        }
    }
    
    private void CreateStructureForEvent(DefaultMutableTreeNode tnNode, Element eParentEvent, Document dDoc) {
        try
        {
            CustomTreeNode oNode = Global.GetNodeForHashCode(tnNode.hashCode());
            Element eEvent = dDoc.createElement("event");
            eEvent.setAttribute("name", oNode.sEventName);
            for (int i = 0; i < tnNode.getChildCount(); i++)
            {
                CreateStructureForEvent((DefaultMutableTreeNode)tnNode.getChildAt(i), eEvent, dDoc);
            }
            if (eParentEvent != null)
                eParentEvent.appendChild(eEvent);
            else
                dDoc.appendChild(eEvent);
        }
        catch (Exception ex)
        {
        }
    }
    
    public void LoadEventList()
    {
        try
        {
            JFileChooser fcLoad = new JFileChooser(OSValidator.GetAppPath() + "/SavedEventsStructure");
            fcLoad.setFileFilter(new xmlFileFilter());
            int drResult = fcLoad.showOpenDialog(jPanel1);
            if (drResult == JFileChooser.APPROVE_OPTION)
            {
                ClearEventList();
                File fSelected = fcLoad.getSelectedFile();

                Document dDoc;
                DocumentBuilderFactory dbfFactory = DocumentBuilderFactory.newInstance();
                dbfFactory.setNamespaceAware(true);
                DocumentBuilder dbBuilder = dbfFactory.newDocumentBuilder();
                dDoc = dbBuilder.parse(fSelected.getPath());
                dDoc.getDocumentElement().normalize();
                
                NodeList nlEvents = dDoc.getElementsByTagName("event");
                if (nlEvents != null && nlEvents.getLength() > 0)
                {
                    Element eEvent = (Element) nlEvents.item(0);
                    String sEventName = eEvent.getAttribute("name");
                    CustomTreeNode tnEvent = new CustomTreeNode();
                    DefaultMutableTreeNode oRoot = (DefaultMutableTreeNode)trEvents.getModel().getRoot();
                    oRoot.setUserObject(sEventName);
                    tnEvent.tnNode = oRoot;
                    tnEvent.iHashCode = oRoot.hashCode();
                    tnEvent.sEventName = sEventName;
                    Global.oTreeNodes.add(tnEvent);
                    
                    LoadStructureForEvent(eEvent, tnEvent);
                    
                    trEvents.updateUI();
                    
                    ExpandTree(trEvents, oRoot);
                }
            }
        }
        catch (Exception ex)
        {
            System.out.println("Exception: " + ex.toString());
        }
    }
    
    public void LoadStructureForEvent(Element eParentEvent, CustomTreeNode tnParentEvent)
    {
        NodeList nlEvents = eParentEvent.getChildNodes();
        if (nlEvents != null)
        {
            for (int i = 0; i < nlEvents.getLength(); i++)
            {
                try
                {
                    Element eEvent = (Element) nlEvents.item(i);
                    String sEventName = eEvent.getAttribute("name");
                    CustomTreeNode tnEvent = new CustomTreeNode();
                    DefaultMutableTreeNode oTreeNode = new DefaultMutableTreeNode(sEventName);
                    tnParentEvent.tnNode.add(oTreeNode);
                    tnEvent.tnNode = oTreeNode;
                    tnEvent.iHashCode = oTreeNode.hashCode();
                    tnEvent.sEventName = sEventName;
                    tnEvent.iParentHashCode = tnParentEvent.iHashCode;
                    Global.oTreeNodes.add(tnEvent);

                    LoadStructureForEvent(eEvent, tnEvent);
                }
                catch (Exception ex)
                {
                    //System.out.println("Exception: " + ex.toString());
                }
            }
        }
    }
    
    class xmlFileFilter extends FileFilter
    { 
        public boolean accept(File f)
        {
            if (f.isDirectory())
            {
                return true;
            }
            String s = f.getName();
            return s.endsWith(".xml")||s.endsWith(".XML");
        }

        public String getDescription() 
        {
            return "eXtensible Markup Language file (*.xml)";
        }
    }
    
    class txtFileFilter extends FileFilter
    { 
        public boolean accept(File f)
        {
            if (f.isDirectory())
            {
                return true;
            }
            String s = f.getName();
            return s.endsWith(".txt")||s.endsWith(".TXT");
        }

        public String getDescription() 
        {
            return "Normal text file (*.txt)";
        }
    }
    
    public void ExpandTree(JTree tree, DefaultMutableTreeNode start)
    {
	for (Enumeration children = start.children(); children.hasMoreElements();) {
            DefaultMutableTreeNode dtm = (DefaultMutableTreeNode) children.nextElement();
            if (!dtm.isLeaf()) {
                //
                TreePath tp = new TreePath( dtm.getPath() );
                tree.expandPath(tp);
                //
                ExpandTree(tree, dtm);
            }
	}
	return; 
    }
    
    public void ExportLog() throws FileNotFoundException
    {
        try
        {
            JFileChooser fcSave = new JFileChooser(OSValidator.GetAppPath() + "/SavedLogs");
            fcSave.setFileFilter(new txtFileFilter());
            int drResult = fcSave.showSaveDialog(jPanel1);
            if (drResult == JFileChooser.APPROVE_OPTION)
            {
                File fSelected = fcSave.getSelectedFile();
                
                String sFilePath = fSelected.getPath();
                if (!sFilePath.endsWith(".txt") && !sFilePath.endsWith(".TXT"))
                {
                    sFilePath += ".txt";
                }
                
                String sTextToWrite = "#########################################################################################################################################\r\n";
                sTextToWrite += "# " + TextToSize("No.", 5, true) + " # " + TextToSize("Event ID", 20, true) + " # " + TextToSize("Event name", 50, true) + " # " + TextToSize("Parent(ms)", 10, true) + " # " + TextToSize("Root(ms)", 10, true) + " # " + TextToSize("Timestamp", 23, true) + " #\r\n";
                sTextToWrite += "#########################################################################################################################################\r\n";
                DefaultTableModel dtmEvents = (DefaultTableModel)tblEvents.getModel();
                for (int i = 0; i < dtmEvents.getRowCount(); i++)
                {
                    sTextToWrite += "# " + TextToSize(dtmEvents.getValueAt(i, 0).toString(), 5, false);
                    sTextToWrite += " # " + TextToSize(dtmEvents.getValueAt(i, 1).toString(), 20, true);
                    sTextToWrite += " # " + TextToSize(dtmEvents.getValueAt(i, 2).toString(), 50, true);
                    sTextToWrite += " # " + TextToSize(dtmEvents.getValueAt(i, 3).toString(), 10, false);
                    sTextToWrite += " # " + TextToSize(dtmEvents.getValueAt(i, 4).toString(), 10, false);
                    sTextToWrite += " # " + TextToSize(dtmEvents.getValueAt(i, 5).toString(), 23, true);
                    sTextToWrite += " #\r\n";
                }
                sTextToWrite += "#########################################################################################################################################";
                        
                BufferedWriter out = new BufferedWriter(new FileWriter(sFilePath));
                out.write(sTextToWrite);
                out.close();

            }
        }
        catch (Exception ex)
        {
            //System.out.println("Exception: " + ex.toString());
        }
    }
    
    public String TextToSize(String sText, int iSize, boolean bLeft)
    {
        if (sText.length() > iSize)
        {
            sText = sText.substring(0, iSize - 3) + "...";
        }
        while (sText.length() < iSize)
        {
            if (bLeft)
                sText += " ";
            else
                sText = " " + sText;
        }
        return sText;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnChild;
    private javax.swing.JButton btnClearEvents;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnLoadEvents;
    private javax.swing.JButton btnMonitorStart;
    private javax.swing.JButton btnNodeName;
    private javax.swing.JButton btnSaveEvents;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblEvents;
    private javax.swing.JTree trEvents;
    private javax.swing.JTextField txtActiveMQ;
    private javax.swing.JTextField txtEventName;
    // End of variables declaration//GEN-END:variables

    
}
